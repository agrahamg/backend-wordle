create table "public"."guesses" (
    "attempt" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "game_id" bigint not null,
    "guess" character varying not null,
    "correct" boolean not null default false
);


alter table "public"."guesses" enable row level security;

alter table "public"."games" add column "players" character varying[] default '{}'::character varying[];

CREATE UNIQUE INDEX guesses_id_key ON public.guesses USING btree (attempt);

CREATE UNIQUE INDEX guesses_pkey ON public.guesses USING btree (attempt, user_id, game_id);

alter table "public"."guesses" add constraint "guesses_pkey" PRIMARY KEY using index "guesses_pkey";

alter table "public"."guesses" add constraint "guesses_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) not valid;

alter table "public"."guesses" validate constraint "guesses_game_id_fkey";

alter table "public"."guesses" add constraint "guesses_id_key" UNIQUE using index "guesses_id_key";

alter table "public"."guesses" add constraint "guesses_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."guesses" validate constraint "guesses_user_id_fkey";

create or replace view "public"."invited_games" as  SELECT games.id,
    games.created_at,
    games.hint,
    length((games.word)::text) AS word_length
   FROM (games
     JOIN auth.users ON (((users.email)::text = ANY ((games.players)::text[]))))
  WHERE (users.id = auth.uid());



